import numpy as np
from scipy import interpolate 

x = [4410000,4830000,5250000,5670000]
y = [38.86,41.02,43.18,43.18]
    
def sistemaImpositivoActual(marginal,base):
    return 1329190 + marginal*(base-4830000)

def sistemaImpositivoSegundoGrado(base):
    b0=y[0]
    b1 =(y[1]-y[0])/(x[1]-x[0])
    b2 =(((y[2]-y[1])/(x[2]-x[1]))-((y[1]-y[0])/(x[1]-x[0])))/(x[2]-x[0])
    marginal = b0+b1*(base-x[0])+b2*(base-x[0])*(base-x[1])
    return round(1329190+ (marginal/100)*(base-4830000),2)

def sistemaImpositivoTercerGrado(base):
    interpolacionCubica=interpolate.interp1d(x,y,kind='cubic')
    marginal=interpolacionCubica(base)
    return round(1329190+ (marginal/100)*(base-4830000),2)




encabezados = ["Actual","Propuesto","Diferencia","Conveniencia"]
    

actual = sistemaImpositivoActual(0.4102,5000000)
propuestoLineal= sistemaImpositivoActual(0.3886,5000000)
propuestoCuadratico= sistemaImpositivoSegundoGrado(5000000)
propuestoCubico = sistemaImpositivoTercerGrado(5000000)

diferenciaLineal = propuestoLineal-actual
diferenciaCuadratico =  round(propuestoCuadratico-actual,2)
diferenciaCubico = round(propuestoCubico-actual,2)

convenienciaLineal = "Si conviene" if diferenciaLineal<0 else "No conviene"
convenienciaCuadratico = "Si conviene" if diferenciaCuadratico<0 else "No conviene"
convenienciaCubico = "Si conviene" if diferenciaCubico<0 else "No conviene"

resultados = np.array([
                        [actual,propuestoLineal,diferenciaLineal,convenienciaLineal],
                        [actual,propuestoCuadratico,diferenciaCuadratico,convenienciaCuadratico],
                        [actual,propuestoCubico,diferenciaCubico,convenienciaCubico]
                     ]) 

row_format ="{:>15}" * (len(encabezados))
print(row_format.format(*encabezados))
for  row in resultados:
    print(row_format.format(*row))

